#!/data/data/com.termux/files/usr/bin/node

const { existsSync } = require('node:fs');
const https = require('node:https');
const { promisify } = require('node:util');
const { exec: exec_ } = require('node:child_process');

const exec = promisify(exec_);

console.log('\n\n\n\n\n\n\nWelcome to ReVanced Builder.');

console.log('\n\nThis script will automatically update/install Builder for you,');
console.log('so please wait!');

async function runBuilder() {
    // We're using --no-open to not open ReVanced Builder in a browser.
    await exec(`cd ${process.env.HOME}/revanced-builder && node . --no-open`);
}

async function installBuilder() {
    // This is required to make stuff like JDK, NPM etc. work.
    await exec(`chmod -R 0777 /data/data/com.termux/files/usr`);
    await exec(`curl -sLo ${process.env.HOME}/builder.zip https://github.com/reisxd/revanced-builder/archive/refs/heads/main.zip`);
    await exec(`unzip ${process.env.HOME}/builder.zip`);
    await exec(`mv ${process.env.HOME}/revanced-builder-main ${process.env.HOME}/revanced-builder`);
    await exec(`cd ${process.env.HOME}/revanced-builder && npm i`);
}

async function updateBuilder() {
    await exec(`curl -sLo ${process.env.HOME}/builder.zip https://github.com/reisxd/revanced-builder/archive/refs/heads/main.zip`);
    await exec(`mkdir ${process.env.HOME}/rvba_temp && cp -r ${process.env.HOME}/revanced-builder/revanced ${process.env.HOME}/rvba_temp`);
    await exec(`rm -r ${process.env.HOME}/revanced-builder`);
    await exec(`unzip ${process.env.HOME}/builder.zip`);
    await exec(`mv ${process.env.HOME}/revanced-builder-main ${process.env.HOME}/revanced-builder`);
    await exec(`cd ${process.env.HOME}/revanced-builder && npm i`);
    await exec(`cp -r ${process.env.HOME}/rvba_temp ${process.env.HOME}/revanced-builder/revanced && rm -r ${process.env.HOME}/rvba_temp`);
}

async function checkForUpdates(version, body) {
    if (version === body.tag_name) {
        // Run Builder.
        (async () => {
            console.log('Running ReVanced Builder...');
            await runBuilder();
        })();
    } else {
        (async () => {
            console.log('Updating ReVanced Builder...');
            await updateBuilder();
            console.log('Running ReVanced Builder...');
            await runBuilder();
        })();
    }
}

if (existsSync('/data/data/com.termux/files/home/revanced-builder')) {
    // The tool already exists, decide if the app should update it or not.

    let version;
    try {
        version = require('/data/data/com.termux/files/home/revanced-builder/wsEvents/checkForUpdates.js').currentVersion;
    } catch (e) {
        // Thats weird...

        console.log(`\nAn error occured while fetching the current version:\n${e.stack}`);
    }

    // Check the current version of Builder using GH API 
    const options = {
        hostname: 'api.github.com',
        port: 443,
        path: '/repos/reisxd/revanced-builder/releases/latest',
        method: 'GET',
        agent: https.Agent({ keepAlive: true }),
        headers: {
            'User-Agent': 'ReVanced-Builder-Android',
            'Content-Type': 'application/vnd.github+json'
        },
    };

    let body = '';
    const req = https.request(options, res => {
        console.log(`The response from the GH API: ${res.statusCode}`);

        res.on('data', (data) => {
            body += data.toString();
        });

        res.once('end', () => {
            req.end();
            body = JSON.parse(body);
            checkForUpdates(version, body);
        });
    });

    req.on('error', error => {
        console.error(error);
    });

    req.end();
} else {
    // Install Builder.

    console.log('Installing ReVanced Builder...');

    (async () => {
        await installBuilder();
        console.log('Running ReVanced Builder...');
        await runBuilder();
    })();
}